# Script to fix cut off query descriptions in result yaml files
import yaml
import re
from pathlib import Path
import argparse


class MultiLineDumper(yaml.SafeDumper):
    "Custom dumper for YAML, that dumps all values of key `query` using `|-`."

    def represent_scalar(self, tag, value, style=None):
        value = value.replace("\r\n", "\n")
        if isinstance(value, str) and "\n" in value:
            style = "|"
        return super().represent_scalar(tag, value, style)


SPLITTER = re.compile(r"\.\.\.| \[")

PROJECT_ROOT = Path(__file__).parent.parent

ALL_BENCHMARK_QUERIES = []

# Read full query names
with open(PROJECT_ROOT / "query-templates.yaml", "r") as f:
    t = yaml.safe_load(f)
    for q in t["queries"]:
        ALL_BENCHMARK_QUERIES.append((q["name"], q["description"]))


def fix_yaml_file(f: str):
    j = 0
    with open(f, "r") as yf:
        x = yaml.safe_load(yf)
    for q in x["queries"]:
        name = q["query"]
        s = SPLITTER.split(name)
        if len(s) == 1:
            continue
        if s[-1].strip().endswith("]"):
            s[-1] = s[-1].strip()[:-1]
        while not ALL_BENCHMARK_QUERIES[j][0].startswith(s[0].strip()) or \
                not ALL_BENCHMARK_QUERIES[j][1].endswith(s[-1]):
            j += 1
        q["query"] = \
            f"{ALL_BENCHMARK_QUERIES[j][0]} [{ALL_BENCHMARK_QUERIES[j][1]}]"
        print(name, "--renamed-to-->", q["query"])
        j += 1
    with open(f, "w") as yf:
        yaml.dump(x, yf, sort_keys=False,
                  Dumper=MultiLineDumper, allow_unicode=True,)


def command_line_args() -> argparse.Namespace:
    """
    Parse the command line arguments and return them
    """
    arg_parser = argparse.ArgumentParser(
        description="""
        This helper fixes yaml files generated by an old qlever-control version,
        which cut off query descriptions. 
        """)
    arg_parser.add_argument(
        "yaml_files", nargs='+', type=str,
        help="The result yaml files to be modified.")
    return arg_parser.parse_args()


if __name__ == "__main__":
    args = command_line_args()
    for f in args.yaml_files:
        fix_yaml_file(f)
